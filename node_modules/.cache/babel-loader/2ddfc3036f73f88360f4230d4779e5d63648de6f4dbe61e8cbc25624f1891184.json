{"ast":null,"code":"import _slicedToArray from \"/Users/ysk/projects/r-o-h/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/ysk/projects/r-o-h/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/ysk/projects/r-o-h/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ysk/projects/r-o-h/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/ysk/projects/r-o-h/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ysk/projects/r-o-h/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/ysk/projects/r-o-h/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _ERRORS;\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Analytics.\r\n */\nvar ANALYTICS_TYPE = 'analytics';\n// Key to attach FID to in gtag params.\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.'), _defineProperty(_ERRORS, \"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */, 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-intialized instance.'), _defineProperty(_ERRORS, \"already-initialized-settings\" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */, 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.'), _defineProperty(_ERRORS, \"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, 'Firebase Analytics Interop Component failed to instantiate: {$reason}'), _defineProperty(_ERRORS, \"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}'), _defineProperty(_ERRORS, \"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}'), _defineProperty(_ERRORS, \"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.'), _defineProperty(_ERRORS, \"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}'), _defineProperty(_ERRORS, \"no-api-key\" /* AnalyticsError.NO_API_KEY */, 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.'), _defineProperty(_ERRORS, \"no-app-id\" /* AnalyticsError.NO_APP_ID */, 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.'), _defineProperty(_ERRORS, \"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */, 'The \"client_id\" field is empty.'), _defineProperty(_ERRORS, \"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Verifies and creates a TrustedScriptURL.\r\n */\nfunction createGtagTrustedTypesScriptURL(url) {\n  if (!url.startsWith(GTAG_URL)) {\n    var err = ERROR_FACTORY.create(\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n  return url;\n}\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\nfunction promiseAllSettled(promises) {\n  return Promise.all(promises.map(function (promise) {\n    return promise.catch(function (e) {\n      return e;\n    });\n  }));\n}\n/**\r\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\r\n *\r\n * @param policyName A string containing the name of the policy\r\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\r\n * | the TrustedTypePolicy reference documentation}.\r\n */\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  var trustedTypesPolicy;\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\n  }\n  return trustedTypesPolicy;\n}\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n  var trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\n    createScriptURL: createGtagTrustedTypesScriptURL\n  });\n  var script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  var gtagScriptURL = \"\".concat(GTAG_URL, \"?l=\").concat(dataLayerName, \"&id=\").concat(measurementId);\n  script.src = trustedTypesPolicy ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL) : gtagScriptURL;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\nfunction gtagOnConfig(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _gtagOnConfig.apply(this, arguments);\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\nfunction _gtagOnConfig() {\n  _gtagOnConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n    var correspondingAppId, dynamicConfigResults, foundConfig;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          // If config is already fetched, we know the appId and can use it to look up what FID promise we\n          /// are waiting for, and wait only on that one.\n          correspondingAppId = measurementIdToAppId[measurementId];\n          _context2.prev = 1;\n          if (!correspondingAppId) {\n            _context2.next = 7;\n            break;\n          }\n          _context2.next = 5;\n          return initializationPromisesMap[correspondingAppId];\n        case 5:\n          _context2.next = 14;\n          break;\n        case 7:\n          _context2.next = 9;\n          return promiseAllSettled(dynamicConfigPromisesList);\n        case 9:\n          dynamicConfigResults = _context2.sent;\n          foundConfig = dynamicConfigResults.find(function (config) {\n            return config.measurementId === measurementId;\n          });\n          if (!foundConfig) {\n            _context2.next = 14;\n            break;\n          }\n          _context2.next = 14;\n          return initializationPromisesMap[foundConfig.appId];\n        case 14:\n          _context2.next = 19;\n          break;\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](1);\n          logger.error(_context2.t0);\n        case 19:\n          gtagCore(\"config\" /* GtagCommand.CONFIG */, measurementId, gtagParams);\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[1, 16]]);\n  }));\n  return _gtagOnConfig.apply(this, arguments);\n}\nfunction gtagOnEvent(_x7, _x8, _x9, _x10, _x11) {\n  return _gtagOnEvent.apply(this, arguments);\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\nfunction _gtagOnEvent() {\n  _gtagOnEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _iterator, _step, _loop;\n    return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n          // an initializeIds() promise we are waiting for.\n          if (!(gtagParams && gtagParams['send_to'])) {\n            _context4.next = 26;\n            break;\n          }\n          gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n          if (!Array.isArray(gaSendToList)) {\n            gaSendToList = [gaSendToList];\n          }\n          // Checking 'send_to' fields requires having all measurement ID results back from\n          // the dynamic config fetch.\n          _context4.next = 7;\n          return promiseAllSettled(dynamicConfigPromisesList);\n        case 7:\n          dynamicConfigResults = _context4.sent;\n          _iterator = _createForOfIteratorHelper(gaSendToList);\n          _context4.prev = 9;\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var sendToId, foundConfig, initializationPromise;\n            return _regeneratorRuntime().wrap(function _loop$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  sendToId = _step.value;\n                  // Any fetched dynamic measurement ID that matches this 'send_to' ID\n                  foundConfig = dynamicConfigResults.find(function (config) {\n                    return config.measurementId === sendToId;\n                  });\n                  initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n                  if (!initializationPromise) {\n                    _context3.next = 7;\n                    break;\n                  }\n                  initializationPromisesToWaitFor.push(initializationPromise);\n                  _context3.next = 9;\n                  break;\n                case 7:\n                  // Found an item in 'send_to' that is not associated\n                  // directly with an FID, possibly a group.  Empty this array,\n                  // exit the loop early, and let it get populated below.\n                  initializationPromisesToWaitFor = [];\n                  return _context3.abrupt(\"return\", 1);\n                case 9:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _loop);\n          });\n          _iterator.s();\n        case 12:\n          if ((_step = _iterator.n()).done) {\n            _context4.next = 18;\n            break;\n          }\n          return _context4.delegateYield(_loop(), \"t0\", 14);\n        case 14:\n          if (!_context4.t0) {\n            _context4.next = 16;\n            break;\n          }\n          return _context4.abrupt(\"break\", 18);\n        case 16:\n          _context4.next = 12;\n          break;\n        case 18:\n          _context4.next = 23;\n          break;\n        case 20:\n          _context4.prev = 20;\n          _context4.t1 = _context4[\"catch\"](9);\n          _iterator.e(_context4.t1);\n        case 23:\n          _context4.prev = 23;\n          _iterator.f();\n          return _context4.finish(23);\n        case 26:\n          // This will be unpopulated if there was no 'send_to' field , or\n          // if not all entries in the 'send_to' field could be mapped to\n          // a FID. In these cases, wait on all pending initialization promises.\n          if (initializationPromisesToWaitFor.length === 0) {\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n          }\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          _context4.next = 29;\n          return Promise.all(initializationPromisesToWaitFor);\n        case 29:\n          // Workaround for http://b/141370449 - third argument cannot be undefined.\n          gtagCore(\"event\" /* GtagCommand.EVENT */, measurementId, gtagParams || {});\n          _context4.next = 35;\n          break;\n        case 32:\n          _context4.prev = 32;\n          _context4.t2 = _context4[\"catch\"](0);\n          logger.error(_context4.t2);\n        case 35:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee3, null, [[0, 32], [9, 20, 23, 26]]);\n  }));\n  return _gtagOnEvent.apply(this, arguments);\n}\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(_x12) {\n    return _gtagWrapper.apply(this, arguments);\n  }\n  function _gtagWrapper() {\n    _gtagWrapper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(command) {\n      var _len,\n        args,\n        _key,\n        measurementId,\n        gtagParams,\n        _measurementId,\n        _gtagParams,\n        _gtagParams2,\n        _measurementId2,\n        fieldName,\n        callback,\n        customParams,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            for (_len = _args2.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = _args2[_key];\n            }\n            if (!(command === \"event\" /* GtagCommand.EVENT */)) {\n              _context.next = 8;\n              break;\n            }\n            measurementId = args[0], gtagParams = args[1]; // If EVENT, second arg must be measurementId.\n            _context.next = 6;\n            return gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);\n          case 6:\n            _context.next = 15;\n            break;\n          case 8:\n            if (!(command === \"config\" /* GtagCommand.CONFIG */)) {\n              _context.next = 14;\n              break;\n            }\n            _measurementId = args[0], _gtagParams = args[1]; // If CONFIG, second arg must be measurementId.\n            _context.next = 12;\n            return gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, _measurementId, _gtagParams);\n          case 12:\n            _context.next = 15;\n            break;\n          case 14:\n            if (command === \"consent\" /* GtagCommand.CONSENT */) {\n              _gtagParams2 = args[0];\n              gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'update', _gtagParams2);\n            } else if (command === \"get\" /* GtagCommand.GET */) {\n              _measurementId2 = args[0], fieldName = args[1], callback = args[2];\n              gtagCore(\"get\" /* GtagCommand.GET */, _measurementId2, fieldName, callback);\n            } else if (command === \"set\" /* GtagCommand.SET */) {\n              customParams = args[0]; // If SET, second arg must be params.\n              gtagCore(\"set\" /* GtagCommand.SET */, customParams);\n            } else {\n              gtagCore.apply(void 0, [command].concat(args));\n            }\n          case 15:\n            _context.next = 20;\n            break;\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n            logger.error(_context.t0);\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 17]]);\n    }));\n    return _gtagWrapper.apply(this, arguments);\n  }\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function gtagCore() {\n    for (var _len2 = arguments.length, _args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      _args[_key2] = arguments[_key2];\n    }\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns the script tag in the DOM matching both the gtag url pattern\r\n * and the provided data layer name.\r\n */\nfunction findGtagScriptOnPage(dataLayerName) {\n  var scriptTags = window.document.getElementsByTagName('script');\n  for (var _i = 0, _Object$values = Object.values(scriptTags); _i < _Object$values.length; _i++) {\n    var tag = _Object$values[_i];\n    if (tag.src && tag.src.includes(GTAG_URL) && tag.src.includes(dataLayerName)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\nvar LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\nvar BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\nvar RetryData = /*#__PURE__*/function () {\n  function RetryData() {\n    var throttleMetadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var intervalMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_INTERVAL_MILLIS;\n    _classCallCheck(this, RetryData);\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n  _createClass(RetryData, [{\n    key: \"getThrottleMetadata\",\n    value: function getThrottleMetadata(appId) {\n      return this.throttleMetadata[appId];\n    }\n  }, {\n    key: \"setThrottleMetadata\",\n    value: function setThrottleMetadata(appId, metadata) {\n      this.throttleMetadata[appId] = metadata;\n    }\n  }, {\n    key: \"deleteThrottleMetadata\",\n    value: function deleteThrottleMetadata(appId) {\n      delete this.throttleMetadata[appId];\n    }\n  }]);\n  return RetryData;\n}();\nvar defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfig(_x13) {\n  return _fetchDynamicConfig.apply(this, arguments);\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction _fetchDynamicConfig() {\n  _fetchDynamicConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(appFields) {\n    var _a, appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\n    return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          appId = appFields.appId, apiKey = appFields.apiKey;\n          request = {\n            method: 'GET',\n            headers: getHeaders(apiKey)\n          };\n          appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n          _context5.next = 5;\n          return fetch(appUrl, request);\n        case 5:\n          response = _context5.sent;\n          if (!(response.status !== 200 && response.status !== 304)) {\n            _context5.next = 18;\n            break;\n          }\n          errorMessage = '';\n          _context5.prev = 8;\n          _context5.next = 11;\n          return response.json();\n        case 11:\n          jsonResponse = _context5.sent;\n          if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n            errorMessage = jsonResponse.error.message;\n          }\n          _context5.next = 17;\n          break;\n        case 15:\n          _context5.prev = 15;\n          _context5.t0 = _context5[\"catch\"](8);\n        case 17:\n          throw ERROR_FACTORY.create(\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, {\n            httpStatus: response.status,\n            responseMessage: errorMessage\n          });\n        case 18:\n          return _context5.abrupt(\"return\", response.json());\n        case 19:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee4, null, [[8, 15]]);\n  }));\n  return _fetchDynamicConfig.apply(this, arguments);\n}\nfunction fetchDynamicConfigWithRetry(_x14) {\n  return _fetchDynamicConfigWithRetry.apply(this, arguments);\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\nfunction _fetchDynamicConfigWithRetry() {\n  _fetchDynamicConfigWithRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(app) {\n    var retryData,\n      timeoutMillis,\n      _app$options,\n      appId,\n      apiKey,\n      measurementId,\n      throttleMetadata,\n      signal,\n      _args8 = arguments;\n    return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          retryData = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : defaultRetryData;\n          timeoutMillis = _args8.length > 2 ? _args8[2] : undefined;\n          _app$options = app.options, appId = _app$options.appId, apiKey = _app$options.apiKey, measurementId = _app$options.measurementId;\n          if (appId) {\n            _context7.next = 5;\n            break;\n          }\n          throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n        case 5:\n          if (apiKey) {\n            _context7.next = 9;\n            break;\n          }\n          if (!measurementId) {\n            _context7.next = 8;\n            break;\n          }\n          return _context7.abrupt(\"return\", {\n            measurementId: measurementId,\n            appId: appId\n          });\n        case 8:\n          throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n        case 9:\n          throttleMetadata = retryData.getThrottleMetadata(appId) || {\n            backoffCount: 0,\n            throttleEndTimeMillis: Date.now()\n          };\n          signal = new AnalyticsAbortSignal();\n          setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n              while (1) switch (_context6.prev = _context6.next) {\n                case 0:\n                  // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n                  signal.abort();\n                case 1:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }, _callee5);\n          })), timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n          return _context7.abrupt(\"return\", attemptFetchDynamicConfigWithRetry({\n            appId: appId,\n            apiKey: apiKey,\n            measurementId: measurementId\n          }, throttleMetadata, signal, retryData));\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee6);\n  }));\n  return _fetchDynamicConfigWithRetry.apply(this, arguments);\n}\nfunction attemptFetchDynamicConfigWithRetry(_x15, _x16, _x17) {\n  return _attemptFetchDynamicConfigWithRetry.apply(this, arguments);\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction _attemptFetchDynamicConfigWithRetry() {\n  _attemptFetchDynamicConfigWithRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(appFields, _ref, signal) {\n    var throttleEndTimeMillis,\n      backoffCount,\n      retryData,\n      _a,\n      appId,\n      measurementId,\n      response,\n      error,\n      backoffMillis,\n      throttleMetadata,\n      _args9 = arguments;\n    return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          throttleEndTimeMillis = _ref.throttleEndTimeMillis, backoffCount = _ref.backoffCount;\n          retryData = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : defaultRetryData;\n          appId = appFields.appId, measurementId = appFields.measurementId; // Starts with a (potentially zero) timeout to support resumption from stored state.\n          // Ensures the throttle end time is honored if the last attempt timed out.\n          // Note the SDK will never make a request if the fetch timeout expires at this point.\n          _context8.prev = 3;\n          _context8.next = 6;\n          return setAbortableTimeout(signal, throttleEndTimeMillis);\n        case 6:\n          _context8.next = 14;\n          break;\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](3);\n          if (!measurementId) {\n            _context8.next = 13;\n            break;\n          }\n          logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" + \" Falling back to the measurement ID \".concat(measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config. [\".concat(_context8.t0 === null || _context8.t0 === void 0 ? void 0 : _context8.t0.message, \"]\"));\n          return _context8.abrupt(\"return\", {\n            appId: appId,\n            measurementId: measurementId\n          });\n        case 13:\n          throw _context8.t0;\n        case 14:\n          _context8.prev = 14;\n          _context8.next = 17;\n          return fetchDynamicConfig(appFields);\n        case 17:\n          response = _context8.sent;\n          // Note the SDK only clears throttle state if response is success or non-retriable.\n          retryData.deleteThrottleMetadata(appId);\n          return _context8.abrupt(\"return\", response);\n        case 22:\n          _context8.prev = 22;\n          _context8.t1 = _context8[\"catch\"](14);\n          error = _context8.t1;\n          if (isRetriableError(error)) {\n            _context8.next = 33;\n            break;\n          }\n          retryData.deleteThrottleMetadata(appId);\n          if (!measurementId) {\n            _context8.next = 32;\n            break;\n          }\n          logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" + \" Falling back to the measurement ID \".concat(measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config. [\".concat(error === null || error === void 0 ? void 0 : error.message, \"]\"));\n          return _context8.abrupt(\"return\", {\n            appId: appId,\n            measurementId: measurementId\n          });\n        case 32:\n          throw _context8.t1;\n        case 33:\n          backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis); // Increments backoff state.\n          throttleMetadata = {\n            throttleEndTimeMillis: Date.now() + backoffMillis,\n            backoffCount: backoffCount + 1\n          }; // Persists state.\n          retryData.setThrottleMetadata(appId, throttleMetadata);\n          logger.debug(\"Calling attemptFetch again in \".concat(backoffMillis, \" millis\"));\n          return _context8.abrupt(\"return\", attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData));\n        case 38:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee7, null, [[3, 8], [14, 22]]);\n  }));\n  return _attemptFetchDynamicConfigWithRetry.apply(this, arguments);\n}\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(function () {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nvar AnalyticsAbortSignal = /*#__PURE__*/function () {\n  function AnalyticsAbortSignal() {\n    _classCallCheck(this, AnalyticsAbortSignal);\n    this.listeners = [];\n  }\n  _createClass(AnalyticsAbortSignal, [{\n    key: \"addEventListener\",\n    value: function addEventListener(listener) {\n      this.listeners.push(listener);\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }]);\n  return AnalyticsAbortSignal;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Event parameters to set on 'gtag' during initialization.\r\n */\nvar defaultEventParametersForInit;\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\nfunction logEvent$1(_x18, _x19, _x20, _x21, _x22) {\n  return _logEvent$.apply(this, arguments);\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\nfunction _logEvent$() {\n  _logEvent$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(gtagFunction, initializationPromise, eventName, eventParams, options) {\n    var measurementId, params;\n    return _regeneratorRuntime().wrap(function _callee8$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          if (!(options && options.global)) {\n            _context9.next = 5;\n            break;\n          }\n          gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, eventParams);\n          return _context9.abrupt(\"return\");\n        case 5:\n          _context9.next = 7;\n          return initializationPromise;\n        case 7:\n          measurementId = _context9.sent;\n          params = Object.assign(Object.assign({}, eventParams), {\n            'send_to': measurementId\n          });\n          gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, params);\n        case 10:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee8);\n  }));\n  return _logEvent$.apply(this, arguments);\n}\nfunction setCurrentScreen$1(_x23, _x24, _x25, _x26) {\n  return _setCurrentScreen$.apply(this, arguments);\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\nfunction _setCurrentScreen$() {\n  _setCurrentScreen$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(gtagFunction, initializationPromise, screenName, options) {\n    var measurementId;\n    return _regeneratorRuntime().wrap(function _callee9$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          if (!(options && options.global)) {\n            _context10.next = 5;\n            break;\n          }\n          gtagFunction(\"set\" /* GtagCommand.SET */, {\n            'screen_name': screenName\n          });\n          return _context10.abrupt(\"return\", Promise.resolve());\n        case 5:\n          _context10.next = 7;\n          return initializationPromise;\n        case 7:\n          measurementId = _context10.sent;\n          gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'screen_name': screenName\n          });\n        case 9:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee9);\n  }));\n  return _setCurrentScreen$.apply(this, arguments);\n}\nfunction setUserId$1(_x27, _x28, _x29, _x30) {\n  return _setUserId$.apply(this, arguments);\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\nfunction _setUserId$() {\n  _setUserId$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(gtagFunction, initializationPromise, id, options) {\n    var measurementId;\n    return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          if (!(options && options.global)) {\n            _context11.next = 5;\n            break;\n          }\n          gtagFunction(\"set\" /* GtagCommand.SET */, {\n            'user_id': id\n          });\n          return _context11.abrupt(\"return\", Promise.resolve());\n        case 5:\n          _context11.next = 7;\n          return initializationPromise;\n        case 7:\n          measurementId = _context11.sent;\n          gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'user_id': id\n          });\n        case 9:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee10);\n  }));\n  return _setUserId$.apply(this, arguments);\n}\nfunction setUserProperties$1(_x31, _x32, _x33, _x34) {\n  return _setUserProperties$.apply(this, arguments);\n}\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n */\nfunction _setUserProperties$() {\n  _setUserProperties$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(gtagFunction, initializationPromise, properties, options) {\n    var flatProperties, _i2, _Object$keys, key, measurementId;\n    return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          if (!(options && options.global)) {\n            _context12.next = 7;\n            break;\n          }\n          flatProperties = {};\n          for (_i2 = 0, _Object$keys = Object.keys(properties); _i2 < _Object$keys.length; _i2++) {\n            key = _Object$keys[_i2];\n            // use dot notation for merge behavior in gtag.js\n            flatProperties[\"user_properties.\".concat(key)] = properties[key];\n          }\n          gtagFunction(\"set\" /* GtagCommand.SET */, flatProperties);\n          return _context12.abrupt(\"return\", Promise.resolve());\n        case 7:\n          _context12.next = 9;\n          return initializationPromise;\n        case 9:\n          measurementId = _context12.sent;\n          gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'user_properties': properties\n          });\n        case 11:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee11);\n  }));\n  return _setUserProperties$.apply(this, arguments);\n}\nfunction internalGetGoogleAnalyticsClientId(_x35, _x36) {\n  return _internalGetGoogleAnalyticsClientId.apply(this, arguments);\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\nfunction _internalGetGoogleAnalyticsClientId() {\n  _internalGetGoogleAnalyticsClientId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(gtagFunction, initializationPromise) {\n    var measurementId;\n    return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return initializationPromise;\n        case 2:\n          measurementId = _context13.sent;\n          return _context13.abrupt(\"return\", new Promise(function (resolve, reject) {\n            gtagFunction(\"get\" /* GtagCommand.GET */, measurementId, 'client_id', function (clientId) {\n              if (!clientId) {\n                reject(ERROR_FACTORY.create(\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */));\n              }\n\n              resolve(clientId);\n            });\n          }));\n        case 4:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee12);\n  }));\n  return _internalGetGoogleAnalyticsClientId.apply(this, arguments);\n}\nfunction setAnalyticsCollectionEnabled$1(_x37, _x38) {\n  return _setAnalyticsCollectionEnabled$.apply(this, arguments);\n}\n/**\r\n * Consent parameters to default to during 'gtag' initialization.\r\n */\nfunction _setAnalyticsCollectionEnabled$() {\n  _setAnalyticsCollectionEnabled$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(initializationPromise, enabled) {\n    var measurementId;\n    return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return initializationPromise;\n        case 2:\n          measurementId = _context14.sent;\n          window[\"ga-disable-\".concat(measurementId)] = !enabled;\n        case 4:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee13);\n  }));\n  return _setAnalyticsCollectionEnabled$.apply(this, arguments);\n}\nvar defaultConsentSettingsForInit;\n/**\r\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\r\n * analytics.\r\n *\r\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\r\n */\nfunction _setConsentDefaultForInit(consentSettings) {\n  defaultConsentSettingsForInit = consentSettings;\n}\n/**\r\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\r\n * analytics.\r\n *\r\n * @param customParams Any custom params the user may pass to gtag.js.\r\n */\nfunction _setDefaultEventParametersForInit(customParams) {\n  defaultEventParametersForInit = customParams;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateIndexedDB() {\n  return _validateIndexedDB.apply(this, arguments);\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\nfunction _validateIndexedDB() {\n  _validateIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n    return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n      while (1) switch (_context15.prev = _context15.next) {\n        case 0:\n          if (isIndexedDBAvailable()) {\n            _context15.next = 5;\n            break;\n          }\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: 'IndexedDB is not available in this environment.'\n          }).message);\n          return _context15.abrupt(\"return\", false);\n        case 5:\n          _context15.prev = 5;\n          _context15.next = 8;\n          return validateIndexedDBOpenable();\n        case 8:\n          _context15.next = 14;\n          break;\n        case 10:\n          _context15.prev = 10;\n          _context15.t0 = _context15[\"catch\"](5);\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: _context15.t0 === null || _context15.t0 === void 0 ? void 0 : _context15.t0.toString()\n          }).message);\n          return _context15.abrupt(\"return\", false);\n        case 14:\n          return _context15.abrupt(\"return\", true);\n        case 15:\n        case \"end\":\n          return _context15.stop();\n      }\n    }, _callee14, null, [[5, 10]]);\n  }));\n  return _validateIndexedDB.apply(this, arguments);\n}\nfunction _initializeAnalytics(_x39, _x40, _x41, _x42, _x43, _x44, _x45) {\n  return _initializeAnalytics2.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Analytics Service class.\r\n */\nfunction _initializeAnalytics2() {\n  _initializeAnalytics2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\n    var _a, dynamicConfigPromise, fidPromise, _yield$Promise$all, _yield$Promise$all2, dynamicConfig, fid, configProperties;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n          dynamicConfigPromise.then(function (config) {\n            measurementIdToAppId[config.measurementId] = config.appId;\n            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n              logger.warn(\"The measurement ID in the local Firebase config (\".concat(app.options.measurementId, \")\") + \" does not match the measurement ID fetched from the server (\".concat(config.measurementId, \").\") + \" To ensure analytics events are always sent to the correct Analytics property,\" + \" update the\" + \" measurement ID field in the local config or remove it from the local config.\");\n            }\n          }).catch(function (e) {\n            return logger.error(e);\n          });\n          // Add to list to track state of all dynamic config promises.\n          dynamicConfigPromisesList.push(dynamicConfigPromise);\n          fidPromise = validateIndexedDB().then(function (envIsValid) {\n            if (envIsValid) {\n              return installations.getId();\n            } else {\n              return undefined;\n            }\n          });\n          _context16.next = 6;\n          return Promise.all([dynamicConfigPromise, fidPromise]);\n        case 6:\n          _yield$Promise$all = _context16.sent;\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n          dynamicConfig = _yield$Promise$all2[0];\n          fid = _yield$Promise$all2[1];\n          // Detect if user has already put the gtag <script> tag on this page with the passed in\n          // data layer name.\n          if (!findGtagScriptOnPage(dataLayerName)) {\n            insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n          }\n          // Detects if there are consent settings that need to be configured.\n          if (defaultConsentSettingsForInit) {\n            gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);\n            _setConsentDefaultForInit(undefined);\n          }\n          // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          gtagCore('js', new Date());\n          // User config added first. We don't want users to accidentally overwrite\n          // base Firebase config properties.\n          configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {}; // guard against developers accidentally setting properties with prefix `firebase_`\n          configProperties[ORIGIN_KEY] = 'firebase';\n          configProperties.update = true;\n          if (fid != null) {\n            configProperties[GA_FID_KEY] = fid;\n          }\n          // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n          // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n          // `configProperties`.\n          gtagCore(\"config\" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);\n          // Detects if there is data that will be set on every event logged from the SDK.\n          if (defaultEventParametersForInit) {\n            gtagCore(\"set\" /* GtagCommand.SET */, defaultEventParametersForInit);\n            _setDefaultEventParametersForInit(undefined);\n          }\n          return _context16.abrupt(\"return\", dynamicConfig.measurementId);\n        case 20:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15);\n  }));\n  return _initializeAnalytics2.apply(this, arguments);\n}\nvar AnalyticsService = /*#__PURE__*/function () {\n  function AnalyticsService(app) {\n    _classCallCheck(this, AnalyticsService);\n    this.app = app;\n  }\n  _createClass(AnalyticsService, [{\n    key: \"_delete\",\n    value: function _delete() {\n      delete initializationPromisesMap[this.app.options.appId];\n      return Promise.resolve();\n    }\n  }]);\n  return AnalyticsService;\n}();\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\nvar initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\nvar dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\nvar measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\nvar globalInitDone = false;\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\nfunction warnOnBrowserContextMismatch() {\n  var mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    var details = mismatchedEnvMessages.map(function (message, index) {\n      return \"(\".concat(index + 1, \") \").concat(message);\n    }).join(' ');\n    var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\nfunction factory(app, installations, options) {\n  warnOnBrowserContextMismatch();\n  var appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" + \" measurement ID for this Firebase app. Falling back to the measurement ID \".concat(app.options.measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n    }\n  }\n\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, {\n      id: appId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    var _wrapOrCreateGtag = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName),\n      wrappedGtag = _wrapOrCreateGtag.wrappedGtag,\n      gtagCore = _wrapOrCreateGtag.gtagCore;\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\n  var analyticsInstance = new AnalyticsService(app);\n  return analyticsInstance;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction getAnalytics() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n  // Dependencies\n  var analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n  return initializeAnalytics(app);\n}\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction initializeAnalytics(app) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Dependencies\n  var analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    var existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n    }\n  }\n\n  var analyticsInstance = analyticsProvider.initialize({\n    options: options\n  });\n  return analyticsInstance;\n}\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\nfunction isSupported() {\n  return _isSupported.apply(this, arguments);\n}\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\nfunction _isSupported() {\n  _isSupported = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n    var isDBOpenable;\n    return _regeneratorRuntime().wrap(function _callee16$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          if (!isBrowserExtension()) {\n            _context17.next = 2;\n            break;\n          }\n          return _context17.abrupt(\"return\", false);\n        case 2:\n          if (areCookiesEnabled()) {\n            _context17.next = 4;\n            break;\n          }\n          return _context17.abrupt(\"return\", false);\n        case 4:\n          if (isIndexedDBAvailable()) {\n            _context17.next = 6;\n            break;\n          }\n          return _context17.abrupt(\"return\", false);\n        case 6:\n          _context17.prev = 6;\n          _context17.next = 9;\n          return validateIndexedDBOpenable();\n        case 9:\n          isDBOpenable = _context17.sent;\n          return _context17.abrupt(\"return\", isDBOpenable);\n        case 13:\n          _context17.prev = 13;\n          _context17.t0 = _context17[\"catch\"](6);\n          return _context17.abrupt(\"return\", false);\n        case 16:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee16, null, [[6, 13]]);\n  }));\n  return _isSupported.apply(this, arguments);\n}\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction getGoogleAnalyticsClientId(_x46) {\n  return _getGoogleAnalyticsClientId.apply(this, arguments);\n}\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\nfunction _getGoogleAnalyticsClientId() {\n  _getGoogleAnalyticsClientId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(analyticsInstance) {\n    return _regeneratorRuntime().wrap(function _callee17$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          analyticsInstance = getModularInstance(analyticsInstance);\n          return _context18.abrupt(\"return\", internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]));\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee17);\n  }));\n  return _getGoogleAnalyticsClientId.apply(this, arguments);\n}\nfunction setUserId(analyticsInstance, id, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\nfunction setUserProperties(analyticsInstance, properties, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\r\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\r\n * all subsequent events.\r\n * @public\r\n * @param customParams - Any custom params the user may pass to gtag.js.\r\n */\nfunction setDefaultEventParameters(customParams) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"set\" /* GtagCommand.SET */, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\nfunction _logEvent(analyticsInstance, eventName, eventParams, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Sets the applicable end user consent state for this web app across all gtag references once\r\n * Firebase Analytics is initialized.\r\n *\r\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\r\n * types are set to \"granted\".\r\n * @public\r\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\r\n */\nfunction setConsent(consentSettings) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"consent\" /* GtagCommand.CONSENT */, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\nvar name = \"@firebase/analytics\";\nvar version = \"0.10.0\";\n\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\nfunction registerAnalytics() {\n  _registerComponent(new Component(ANALYTICS_TYPE, function (container, _ref2) {\n    var analyticsOptions = _ref2.options;\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations-internal').getImmediate();\n    return factory(app, installations, analyticsOptions);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: function logEvent(eventName, eventParams, options) {\n          return _logEvent(analytics, eventName, eventParams, options);\n        }\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics();\nexport { getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, _logEvent as logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };","map":{"version":3,"names":["ANALYTICS_TYPE","GA_FID_KEY","ORIGIN_KEY","FETCH_TIMEOUT_MILLIS","DYNAMIC_CONFIG_URL","GTAG_URL","logger","Logger","ERRORS","_ERRORS","_defineProperty","ERROR_FACTORY","ErrorFactory","createGtagTrustedTypesScriptURL","url","startsWith","err","create","gtagURL","warn","message","promiseAllSettled","promises","Promise","all","map","promise","catch","e","createTrustedTypesPolicy","policyName","policyOptions","trustedTypesPolicy","window","trustedTypes","createPolicy","insertScriptTag","dataLayerName","measurementId","createScriptURL","script","document","createElement","gtagScriptURL","concat","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","gtagOnConfig","_x","_x2","_x3","_x4","_x5","_x6","_gtagOnConfig","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","gtagParams","correspondingAppId","dynamicConfigResults","foundConfig","wrap","_callee2$","_context2","prev","next","sent","find","config","appId","t0","error","stop","gtagOnEvent","_x7","_x8","_x9","_x10","_x11","_gtagOnEvent","_callee3","initializationPromisesToWaitFor","gaSendToList","_iterator","_step","_loop","_callee3$","_context4","_createForOfIteratorHelper","sendToId","initializationPromise","_loop$","_context3","value","push","abrupt","s","n","done","delegateYield","t1","f","finish","length","Object","values","t2","wrapGtag","gtagWrapper","_x12","_gtagWrapper","_callee","command","_len","args","_key","_measurementId","_gtagParams","_gtagParams2","_measurementId2","fieldName","callback","customParams","_args2","_callee$","_context","wrapOrCreateGtag","gtagFunctionName","_len2","_args","_key2","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","_i","_Object$values","tag","includes","LONG_RETRY_FACTOR","BASE_INTERVAL_MILLIS","RetryData","throttleMetadata","undefined","intervalMillis","_classCallCheck","_createClass","key","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","defaultRetryData","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","_x13","_fetchDynamicConfig","_callee4","appFields","_a","request","appUrl","response","errorMessage","jsonResponse","_callee4$","_context5","method","headers","replace","fetch","status","json","httpStatus","responseMessage","fetchDynamicConfigWithRetry","_x14","_fetchDynamicConfigWithRetry","_callee6","app","retryData","timeoutMillis","_app$options","signal","_args8","_callee6$","_context7","options","backoffCount","throttleEndTimeMillis","Date","now","AnalyticsAbortSignal","setTimeout","_callee5","_callee5$","_context6","abort","attemptFetchDynamicConfigWithRetry","_x15","_x16","_x17","_attemptFetchDynamicConfigWithRetry","_callee7","_ref","backoffMillis","_args9","_callee7$","_context8","setAbortableTimeout","isRetriableError","Number","customData","calculateBackoffMillis","debug","resolve","reject","Math","max","timeout","addEventListener","clearTimeout","FirebaseError","listeners","listener","forEach","defaultEventParametersForInit","logEvent$1","logEvent","_x18","_x19","_x20","_x21","_x22","_logEvent$","_callee8","gtagFunction","eventName","eventParams","params","_callee8$","_context9","global","assign","setCurrentScreen$1","setCurrentScreen","_x23","_x24","_x25","_x26","_setCurrentScreen$","_callee9","screenName","_callee9$","_context10","update","setUserId$1","setUserId","_x27","_x28","_x29","_x30","_setUserId$","_callee10","id","_callee10$","_context11","setUserProperties$1","setUserProperties","_x31","_x32","_x33","_x34","_setUserProperties$","_callee11","properties","flatProperties","_i2","_Object$keys","_callee11$","_context12","keys","internalGetGoogleAnalyticsClientId","_x35","_x36","_internalGetGoogleAnalyticsClientId","_callee12","_callee12$","_context13","clientId","setAnalyticsCollectionEnabled$1","setAnalyticsCollectionEnabled","_x37","_x38","_setAnalyticsCollectionEnabled$","_callee13","enabled","_callee13$","_context14","defaultConsentSettingsForInit","_setConsentDefaultForInit","consentSettings","_setDefaultEventParametersForInit","validateIndexedDB","_validateIndexedDB","_callee14","_callee14$","_context15","isIndexedDBAvailable","errorInfo","validateIndexedDBOpenable","toString","_initializeAnalytics","_x39","_x40","_x41","_x42","_x43","_x44","_x45","_initializeAnalytics2","_callee15","installations","dynamicConfigPromise","fidPromise","_yield$Promise$all","_yield$Promise$all2","dynamicConfig","fid","configProperties","_callee15$","_context16","then","envIsValid","getId","_slicedToArray","AnalyticsService","_delete","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","settings","warnOnBrowserContextMismatch","mismatchedEnvMessages","isBrowserExtension","areCookiesEnabled","details","index","join","factory","_wrapOrCreateGtag","analyticsInstance","getAnalytics","getApp","getModularInstance","analyticsProvider","_getProvider","isInitialized","getImmediate","initializeAnalytics","existingInstance","deepEqual","getOptions","initialize","isSupported","_isSupported","_callee16","isDBOpenable","_callee16$","_context17","getGoogleAnalyticsClientId","_x46","_getGoogleAnalyticsClientId","_callee17","_callee17$","_context18","setDefaultEventParameters","setConsent","registerAnalytics","_registerComponent","Component","container","_ref2","analyticsOptions","getProvider","internalFactory","registerVersion","name","version","analytics","reason"],"sources":["/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/constants.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/logger.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/errors.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/helpers.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/get-config.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/functions.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/initialize-analytics.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/factory.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/api.ts","/Users/ysk/projects/r-o-h/node_modules/@firebase/analytics/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config',\n  CONSENT = 'consent',\n  GET = 'get'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id',\n  NO_CLIENT_ID = 'no-client-id',\n  INVALID_GTAG_RESOURCE = 'invalid-gtag-resource'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.',\n  [AnalyticsError.NO_CLIENT_ID]: 'The \"client_id\" field is empty.',\n  [AnalyticsError.INVALID_GTAG_RESOURCE]:\n    'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n  [AnalyticsError.INVALID_GTAG_RESOURCE]: { gtagURL: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\n\n// Possible parameter types for gtag 'event' and 'config' commands\ntype GtagConfigOrEventParams = ControlParams & EventParams & CustomParams;\n\n/**\n * Verifies and creates a TrustedScriptURL.\n */\nexport function createGtagTrustedTypesScriptURL(url: string): string {\n  if (!url.startsWith(GTAG_URL)) {\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_GTAG_RESOURCE, {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n  return url;\n}\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\n *\n * @param policyName A string containing the name of the policy\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\n * | the TrustedTypePolicy reference documentation}.\n */\nexport function createTrustedTypesPolicy(\n  policyName: string,\n  policyOptions: Partial<TrustedTypePolicyOptions>\n): Partial<TrustedTypePolicy> | undefined {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  let trustedTypesPolicy: Partial<TrustedTypePolicy> | undefined;\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(\n      policyName,\n      policyOptions\n    );\n  }\n  return trustedTypesPolicy;\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const trustedTypesPolicy = createTrustedTypesPolicy(\n    'firebase-js-sdk-policy',\n    {\n      createScriptURL: createGtagTrustedTypesScriptURL\n    }\n  );\n\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  (script.src as string | TrustedScriptURL) = trustedTypesPolicy\n    ? (trustedTypesPolicy as TrustedTypePolicy)?.createScriptURL(gtagScriptURL)\n    : gtagScriptURL;\n\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event' | 'consent' | 'get' | string,\n    ...args: unknown[]\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        const [measurementId, gtagParams] = args;\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementId as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        const [measurementId, gtagParams] = args;\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          measurementId as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONSENT) {\n        const [gtagParams] = args;\n        gtagCore(GtagCommand.CONSENT, 'update', gtagParams as ConsentSettings);\n      } else if (command === GtagCommand.GET) {\n        const [measurementId, fieldName, callback] = args;\n        gtagCore(\n          GtagCommand.GET,\n          measurementId as string,\n          fieldName as string,\n          callback as (...args: unknown[]) => void\n        );\n      } else if (command === GtagCommand.SET) {\n        const [customParams] = args;\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, customParams as CustomParams);\n      } else {\n        gtagCore(command, ...args);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns the script tag in the DOM matching both the gtag url pattern\n * and the provided data layer name.\n */\nexport function findGtagScriptOnPage(\n  dataLayerName: string\n): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (\n      tag.src &&\n      tag.src.includes(GTAG_URL) &&\n      tag.src.includes(dataLayerName)\n    ) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${\n            (e as Error)?.message\n          }]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    const error = e as Error;\n    if (!isRetriableError(error)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${error?.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(error?.customData?.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\n\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nexport let defaultEventParametersForInit: CustomParams | undefined;\n\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n */\nexport async function internalGetGoogleAnalyticsClientId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>\n): Promise<string> {\n  const measurementId = await initializationPromise;\n  return new Promise((resolve, reject) => {\n    gtagFunction(\n      GtagCommand.GET,\n      measurementId,\n      'client_id',\n      (clientId: string) => {\n        if (!clientId) {\n          reject(ERROR_FACTORY.create(AnalyticsError.NO_CLIENT_ID));\n        }\n        resolve(clientId);\n      }\n    );\n  });\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nexport let defaultConsentSettingsForInit: ConsentSettings | undefined;\n\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nexport function _setConsentDefaultForInit(\n  consentSettings?: ConsentSettings\n): void {\n  defaultConsentSettingsForInit = consentSettings;\n}\n\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nexport function _setDefaultEventParametersForInit(\n  customParams?: CustomParams\n): void {\n  defaultEventParametersForInit = customParams;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\nimport {\n  defaultConsentSettingsForInit,\n  _setConsentDefaultForInit,\n  defaultEventParametersForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: (e as Error)?.toString()\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page with the passed in\n  // data layer name.\n  if (!findGtagScriptOnPage(dataLayerName)) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) {\n    gtagCore(GtagCommand.CONSENT, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) {\n    gtagCore(GtagCommand.SET, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n  }\n\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  ConsentSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE, GtagCommand } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled,\n  _setConsentDefaultForInit,\n  _setDefaultEventParametersForInit,\n  internalGetGoogleAnalyticsClientId\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport async function getGoogleAnalyticsClientId(\n  analyticsInstance: Analytics\n): Promise<string> {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  return internalGetGoogleAnalyticsClientId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!]\n  );\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nexport function setDefaultEventParameters(customParams: CustomParams): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.SET, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/page-view\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nexport function setConsent(consentSettings: ConsentSettings): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.CONSENT, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\n","/**\n * Firebase Analytics\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e as Error\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}